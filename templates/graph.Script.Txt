//Script for generating a clock in the pyplanet interface
#Include "TextLib" as TextLib
#Include "MathLib" as MathLib






main() {

    declare UpdateInterval = 200;


    declare persistent bars = True;
    declare persistent Text[] hide;
    declare persistent Boolean initialized;
    declare persistent diffs = False;
    declare persistent hidetimes = False;

    declare CMlFrame Settings <=> (Page.GetFirstChild("settings_popup") as CMlFrame);
    declare SettingsOpen = False;
    declare Boolean Prev_DistractionFreeMode = False;
    declare netwrite Boolean Net_DistractionFreeMode for UI;

    {% if cptimes is defined%}

    declare Real[][Text] _Times;

    {% for key, value in cptimes.items() %}
    _Times["{{key}}"] = [{{value}}];
    {% endfor %}

    declare Real[] empty;
    _Times["$$live"] = empty;

    {% for i in range(num_checkpoints) %}
    _Times["$$live"].add(0.0);
    {% endfor %}

    if (Net_DistractionFreeMode == True) {
        Page.GetClassChildren("distraction-hide", Page.MainFrame, True);
        foreach (Control in Page.GetClassChildren_Result) {
            Control.Hide();
        }
    }


    declare NextUpdate = CurrentTime-1;
    while (True) {
        yield;



        if (Prev_DistractionFreeMode != Net_DistractionFreeMode) {
            Prev_DistractionFreeMode = Net_DistractionFreeMode;

            if (Net_DistractionFreeMode == True) {
                Page.GetClassChildren("distraction-hide", Page.MainFrame, True);
                foreach (Control in Page.GetClassChildren_Result) {
                    Control.Hide();
                }
            } else {
                Page.GetClassChildren("distraction-hide", Page.MainFrame, True);
                foreach (Control in Page.GetClassChildren_Result) {
                    Control.Show();
                }
            }
        }


        if(!initialized){
            // defaults
            bars = True;
            diffs = False;

            initialized = True;
        }


        foreach(Event in PendingEvents){
            if(Event.Type == CMlScriptEvent::Type::MouseClick){
                if(Event.ControlId == "settings_open" || Event.ControlId == "settings_close"){
                    if(!SettingsOpen){
                        Settings.RelativePosition_V3 = <0.0, 0.0>;
                        SettingsOpen = True;
                    }else{
                        Settings.RelativePosition_V3 = <90000.0, 90000.0>;
                        SettingsOpen = False;
                    }
                }else
                if(Event.ControlId == "graphbg"){
                    NextUpdate = CurrentTime-1;
                    diffs = !diffs;
                }else{
                    declare split = TextLib::Split("_", Event.ControlId);
                    if(split.count > 0){
                        if(split[0] == "setting"){
                            split.removekey(0);
                            declare type = TextLib::Join("_", split);
                            if(type == "hidetimes"){
                                hidetimes = !hidetimes;
                            }
                            if(type == "bars"){
                                bars = !bars;
                            }
                            if(type == "diffs"){
                                diffs = !diffs;
                            }
                            NextUpdate = CurrentTime - 1;
                        }
                        if(split[0] == "toggle" || split[0] == "label"){
                            split.removekey(0);
                            declare type = TextLib::Join("_", split);
                            if(hide.exists(type)){
                                hide.remove(type);
                            }else{
                                hide.add(type);
                            }
                            NextUpdate = CurrentTime - 1;
                        }
                    }
                }

            }
        }

        if(SettingsOpen){
            declare CMlQuad Box;
            declare checkboxes = ["toggle_dedi_first", "toggle_local_first", "toggle_own_dedi", "toggle_own_local", "toggle_other_dedi", "toggle_other_local", "toggle_$$live"];
            foreach(BoxId in checkboxes){
               declare split = TextLib::Split("_", BoxId);
               split.removekey(0);
               declare type = TextLib::Join("_", split);
               Box <=> (Page.GetFirstChild(BoxId) as CMlQuad);
               Box.StyleSelected = !hide.exists(type);
            }
            Box <=> (Page.GetFirstChild("setting_diffs") as CMlQuad);
            Box.StyleSelected = diffs;

            Box <=> (Page.GetFirstChild("setting_bars") as CMlQuad);
            Box.StyleSelected = bars;

            Box <=> (Page.GetFirstChild("setting_hidetimes") as CMlQuad);
            Box.StyleSelected = hidetimes;
        }

        if(CurrentTime>NextUpdate){
            NextUpdate = CurrentTime + UpdateInterval;

            if (!PageIsVisible || GUIPlayer == Null) {
                continue;
            }


            {% for i in range(num_checkpoints) %}
                _Times["$$live"][{{i}}] = 0.0;
            {% endfor %}

            declare Integer j;
            foreach(Time in GUIPlayer.CurRace.Checkpoints){
                if(_Times["$$live"].existskey(j)){
                    _Times["$$live"][j] = Time * 1.0;
                }
                j+=1;
            }
            if(_Times["$$live"].count > GUIPlayer.CurRace.Checkpoints.count){
                if(_Times["$$live"].existskey(GUIPlayer.CurRace.Checkpoints.count)){
                    _Times["$$live"][GUIPlayer.CurRace.Checkpoints.count] = GUIPlayer.CurRace.Time*1.0;
                }
            }

            declare Real[][Text] Times;


            if(!diffs){
                foreach(Run => CpTimes in _Times){
                    Times[Run] = CpTimes;
                }
            }else{
                declare Real last;

                foreach(Run => CpTimes in _Times){
                    last = 0.0;
                    Times[Run] = empty;
                    foreach(Time in CpTimes){
                        Times[Run].add(Time - last);
                        last = Time;
                    }
                }
            }

            declare Max = 0.00001;
            foreach(Run => CpTimes in Times){
                if(!hide.exists(Run)){
                    foreach (Time in CpTimes) {
                        if(Max < Time){
                            Max = Time;
                        }
                    }
                }
            }

            declare Runs = ["dedi_first", "local_first", "own_dedi", "own_local", "$$live", "other_dedi", "other_local"];
            foreach(Run in Runs){
                declare CMlLabel Label <=> (Page.GetFirstChild("label_"^Run) as CMlLabel);
                if(Label != Null){
                    if(!hide.exists(Run)){
                        Label.Opacity = 1.0;
                    }else{
                        Label.Opacity = 0.4;
                    }
                }
            }


            declare Integer i;
            foreach(Run => CpTimes in Times){
                i = 0;
                declare CMlLabel Label <=> (Page.GetFirstChild(Run) as CMlLabel);
                foreach (Time in CpTimes) {
                    declare CMlQuad Pin <=> (Page.GetFirstChild("time_"^Run^"_"^TextLib::ToText(i)) as CMlQuad);
                    if(Pin != Null){
                        if(Time > 0.0 && !hide.exists(Run)){
                            Pin.Show();
                            if(!bars){
                                Pin.RelativePosition_V3.Y = Time * 100 / Max * 0.9;
                                Pin.Size.Y = 1.0;
                                Pin.Opacity = 1.0;
                            }else{
                                Pin.RelativePosition_V3.Y = 0.0;
                                Pin.Size.Y = Time * 100 / Max * 0.9;
                                Pin.Opacity = 0.4;
                            }
                        }else{
                            Pin.Hide();
                        }

                        i+=1;
                    }
                    if(Run == "$$live"){
                        if(i == GUIPlayer.CurRace.Checkpoints.count+1){
                            Pin.BgColor = <1.0, 0.5, 0.5>;
                        }else{
                            Pin.BgColor = <1.0, 0.0, 0.0>;
                        }
                    }
                }
            }

            declare CMlLabel Time4 <=> (Page.GetFirstChild("timelabel_4") as CMlLabel);
            declare CMlLabel Time3 <=> (Page.GetFirstChild("timelabel_3") as CMlLabel);
            declare CMlLabel Time2 <=> (Page.GetFirstChild("timelabel_2") as CMlLabel);
            declare CMlLabel Time1 <=> (Page.GetFirstChild("timelabel_1") as CMlLabel);

            if(!hidetimes){
                Time4.SetText("- "^TextLib::TimeToText(MathLib::NearestInteger(Max), True));
                Time3.SetText("- "^TextLib::TimeToText(MathLib::NearestInteger(Max/3.0*2.0), True));
                Time2.SetText("- "^TextLib::TimeToText(MathLib::NearestInteger(Max/3.0), True));
                Time4.Show();
                Time3.Show();
                Time2.Show();
                Time1.Show();
            }else{
                Time4.Hide();
                Time3.Hide();
                Time2.Hide();
                Time1.Hide();
            }



        }
    }
    {% endif %}
}

