//Script for generating a clock in the pyplanet interface
#Include "TextLib" as TextLib
#Include "MathLib" as MathLib






main() {



    declare persistent lines = True;
    declare persistent Text[] hide;

    declare Boolean Prev_DistractionFreeMode = False;
    declare netwrite Boolean Net_DistractionFreeMode for UI;

    {% if cptimes is defined%}

    declare Real[][Text] _Times;

    {% for key, value in cptimes.items() %}
    _Times["{{key}}"] = [{{value}}];
    {% endfor %}

    declare Real[] empty;
    _Times["$$live"] = empty;

    {% for i in range(num_checkpoints) %}
    _Times["$$live"].add(0.0);
    {% endfor %}

    if (Net_DistractionFreeMode == True) {
        Page.GetClassChildren("distraction-hide", Page.MainFrame, True);
        foreach (Control in Page.GetClassChildren_Result) {
            Control.Hide();
        }
    }


    while (True) {
        yield;


        if (Prev_DistractionFreeMode != Net_DistractionFreeMode) {
            Prev_DistractionFreeMode = Net_DistractionFreeMode;

            if (Net_DistractionFreeMode == True) {
                Page.GetClassChildren("distraction-hide", Page.MainFrame, True);
                foreach (Control in Page.GetClassChildren_Result) {
                    Control.Hide();
                }
            } else {
                Page.GetClassChildren("distraction-hide", Page.MainFrame, True);
                foreach (Control in Page.GetClassChildren_Result) {
                    Control.Show();
                }
            }
        }

        if (!PageIsVisible || GUIPlayer == Null) {
            continue;
        }


        declare Integer j;
        foreach(Time in GUIPlayer.CurRace.Checkpoints){
            _Times["$$live"][j] = Time * 1.0;
            j+=1;
        }
        if(_Times["$$live"].count > GUIPlayer.CurRace.Checkpoints.count){
            _Times["$$live"][GUIPlayer.CurRace.Checkpoints.count] = GUIPlayer.CurRace.Time*1.0;
        }

        declare diffs = False;
        declare Real[][Text] Times;


        if(!diffs){
            foreach(Run => CpTimes in _Times){
                Times[Run] = CpTimes;
            }
        }else{
            declare Real last;

            foreach(Run => CpTimes in _Times){
                last = 0.0;
                Times[Run] = empty;
                foreach(Time in CpTimes){
                    Times[Run].add(Time - last);
                    last = Time;
                }
            }
        }

        declare Max = 0.;
        foreach(Run => CpTimes in Times){
            if(!hide.exists(Run)){
                foreach (Time in CpTimes) {
                    if(Max < Time){
                        Max = Time;
                    }
                }
            }
        }

        declare Runs = ["dedi_first", "local_first", "own_dedi", "own_local", "$$live", "other_dedi", "other_local"];
        foreach(Run in Runs){
            declare CMlLabel Label <=> (Page.GetFirstChild(Run) as CMlLabel);
            if(!hide.exists(Run)){
                Label.Opacity = 1.0;
            }else{
                Label.Opacity = 0.4;
            }
        }

        declare Integer i;
        foreach(Run => CpTimes in Times){
            i = 0;
            declare CMlLabel Label <=> (Page.GetFirstChild(Run) as CMlLabel);
            foreach (Time in CpTimes) {
                declare CMlQuad Pin <=> (Page.GetFirstChild("time_"^Run^"_"^TextLib::ToText(i)) as CMlQuad);
                if(Pin != Null){
                    if(Time != 0.0 && !hide.exists(Run)){
                        Pin.Show();
                    }else{
                        Pin.Hide();
                    }

                    if(lines){
                        Pin.RelativePosition_V3.Y = Time * 100 / Max * 0.9;
                        Pin.Size.Y = 1.0;
                    }else{
                        Pin.RelativePosition_V3.Y = 0.0;
                        Pin.Size.Y = Time * 100 / Max * 0.9;
                    }
                    i+=1;
                }
            }
        }


        foreach(Event in PendingEvents){
            if(Event.Type == CMlScriptEvent::Type::MouseClick){
                if(Event.ControlId == "graphbg"){
                    lines = !lines;
                }else{
                    if(hide.exists(Event.ControlId)){
                        hide.remove(Event.ControlId);
                        log(Event.ControlId);
                    }else{
                        hide.add(Event.ControlId);
                    }
                }
            }
        }
    }
    {% endif %}
}

